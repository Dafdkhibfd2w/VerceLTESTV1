import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { VerifiedAccessTrustProviderFilterSensitiveLog, } from "./models_0";
import { VpnConnectionFilterSensitiveLog, } from "./models_3";
export const InitializationType = {
    default: "default",
    provisioned_rate: "provisioned-rate",
    volume_copy: "volume-copy",
};
export const VolumeStatusName = {
    initialization_state: "initialization-state",
    io_enabled: "io-enabled",
    io_performance: "io-performance",
};
export const VolumeStatusInfoStatus = {
    impaired: "impaired",
    insufficient_data: "insufficient-data",
    ok: "ok",
    warning: "warning",
};
export const VpcAttributeName = {
    enableDnsHostnames: "enableDnsHostnames",
    enableDnsSupport: "enableDnsSupport",
    enableNetworkAddressUsageMetrics: "enableNetworkAddressUsageMetrics",
};
export const VpcBlockPublicAccessExclusionsAllowed = {
    allowed: "allowed",
    not_allowed: "not-allowed",
};
export const InternetGatewayBlockMode = {
    block_bidirectional: "block-bidirectional",
    block_ingress: "block-ingress",
    off: "off",
};
export const ManagedBy = {
    account: "account",
    declarative_policy: "declarative-policy",
};
export const VpcBlockPublicAccessState = {
    default_state: "default-state",
    update_complete: "update-complete",
    update_in_progress: "update-in-progress",
};
export const CapacityManagerStatus = {
    DISABLED: "disabled",
    ENABLED: "enabled",
};
export const ImageBlockPublicAccessDisabledState = {
    unblocked: "unblocked",
};
export const RouteServerPropagationState = {
    AVAILABLE: "available",
    DELETING: "deleting",
    PENDING: "pending",
};
export const SnapshotBlockPublicAccessState = {
    block_all_sharing: "block-all-sharing",
    block_new_sharing: "block-new-sharing",
    unblocked: "unblocked",
};
export const TransitGatewayPropagationState = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    enabling: "enabling",
};
export const ImageBlockPublicAccessEnabledState = {
    block_new_sharing: "block-new-sharing",
};
export const ClientCertificateRevocationListStatusCode = {
    active: "active",
    pending: "pending",
};
export const IngestionStatus = {
    INGESTION_COMPLETE: "ingestion-complete",
    INGESTION_FAILED: "ingestion-failed",
    INITIAL_INGESTION_IN_PROGRESS: "initial-ingestion-in-progress",
};
export const Comparison = {
    EQUALS: "equals",
    IN: "in",
};
export const FilterByDimension = {
    ACCOUNT_ID: "account-id",
    AVAILABILITY_ZONE_ID: "availability-zone-id",
    INSTANCE_FAMILY: "instance-family",
    INSTANCE_PLATFORM: "instance-platform",
    INSTANCE_TYPE: "instance-type",
    RESERVATION_ARN: "reservation-arn",
    RESERVATION_CREATE_TIMESTAMP: "reservation-create-timestamp",
    RESERVATION_END_DATE_TYPE: "reservation-end-date-type",
    RESERVATION_END_TIMESTAMP: "reservation-end-timestamp",
    RESERVATION_ID: "reservation-id",
    RESERVATION_INSTANCE_MATCH_CRITERIA: "reservation-instance-match-criteria",
    RESERVATION_START_TIMESTAMP: "reservation-start-timestamp",
    RESERVATION_STATE: "reservation-state",
    RESERVATION_TYPE: "reservation-type",
    RESERVATION_UNUSED_FINANCIAL_OWNER: "reservation-unused-financial-owner",
    RESOURCE_REGION: "resource-region",
    TENANCY: "tenancy",
};
export const GroupBy = {
    ACCOUNT_ID: "account-id",
    AVAILABILITY_ZONE_ID: "availability-zone-id",
    INSTANCE_FAMILY: "instance-family",
    INSTANCE_PLATFORM: "instance-platform",
    INSTANCE_TYPE: "instance-type",
    RESERVATION_ARN: "reservation-arn",
    RESERVATION_CREATE_TIMESTAMP: "reservation-create-timestamp",
    RESERVATION_END_DATE_TYPE: "reservation-end-date-type",
    RESERVATION_END_TIMESTAMP: "reservation-end-timestamp",
    RESERVATION_ID: "reservation-id",
    RESERVATION_INSTANCE_MATCH_CRITERIA: "reservation-instance-match-criteria",
    RESERVATION_START_TIMESTAMP: "reservation-start-timestamp",
    RESERVATION_STATE: "reservation-state",
    RESERVATION_TYPE: "reservation-type",
    RESERVATION_UNUSED_FINANCIAL_OWNER: "reservation-unused-financial-owner",
    RESOURCE_REGION: "resource-region",
    TENANCY: "tenancy",
};
export const Metric = {
    RESERVATION_AVG_COMMITTED_SIZE_INST: "reservation-avg-committed-size-inst",
    RESERVATION_AVG_COMMITTED_SIZE_VCPU: "reservation-avg-committed-size-vcpu",
    RESERVATION_AVG_FUTURE_SIZE_INST: "reservation-avg-future-size-inst",
    RESERVATION_AVG_FUTURE_SIZE_VCPU: "reservation-avg-future-size-vcpu",
    RESERVATION_AVG_UTILIZATION_INST: "reservation-avg-utilization-inst",
    RESERVATION_AVG_UTILIZATION_VCPU: "reservation-avg-utilization-vcpu",
    RESERVATION_MAX_COMMITTED_SIZE_INST: "reservation-max-committed-size-inst",
    RESERVATION_MAX_COMMITTED_SIZE_VCPU: "reservation-max-committed-size-vcpu",
    RESERVATION_MAX_FUTURE_SIZE_INST: "reservation-max-future-size-inst",
    RESERVATION_MAX_FUTURE_SIZE_VCPU: "reservation-max-future-size-vcpu",
    RESERVATION_MAX_SIZE_INST: "reservation-max-size-inst",
    RESERVATION_MAX_SIZE_VCPU: "reservation-max-size-vcpu",
    RESERVATION_MAX_UNUSED_SIZE_INST: "reservation-max-unused-size-inst",
    RESERVATION_MAX_UNUSED_SIZE_VCPU: "reservation-max-unused-size-vcpu",
    RESERVATION_MAX_UTILIZATION: "reservation-max-utilization",
    RESERVATION_MIN_COMMITTED_SIZE_INST: "reservation-min-committed-size-inst",
    RESERVATION_MIN_COMMITTED_SIZE_VCPU: "reservation-min-committed-size-vcpu",
    RESERVATION_MIN_FUTURE_SIZE_INST: "reservation-min-future-size-inst",
    RESERVATION_MIN_FUTURE_SIZE_VCPU: "reservation-min-future-size-vcpu",
    RESERVATION_MIN_SIZE_INST: "reservation-min-size-inst",
    RESERVATION_MIN_SIZE_VCPU: "reservation-min-size-vcpu",
    RESERVATION_MIN_UNUSED_SIZE_INST: "reservation-min-unused-size-inst",
    RESERVATION_MIN_UNUSED_SIZE_VCPU: "reservation-min-unused-size-vcpu",
    RESERVATION_MIN_UTILIZATION: "reservation-min-utilization",
    RESERVATION_TOTAL_CAPACITY_HRS_INST: "reservation-total-capacity-hrs-inst",
    RESERVATION_TOTAL_CAPACITY_HRS_VCPU: "reservation-total-capacity-hrs-vcpu",
    RESERVATION_TOTAL_COUNT: "reservation-total-count",
    RESERVATION_TOTAL_ESTIMATED_COST: "reservation-total-estimated-cost",
    RESERVATION_UNUSED_TOTAL_CAPACITY_HRS_INST: "reservation-unused-total-capacity-hrs-inst",
    RESERVATION_UNUSED_TOTAL_CAPACITY_HRS_VCPU: "reservation-unused-total-capacity-hrs-vcpu",
    RESERVATION_UNUSED_TOTAL_ESTIMATED_COST: "reservation-unused-total-estimated-cost",
    RESERVED_TOTAL_ESTIMATED_COST: "reserved-total-estimated-cost",
    RESERVED_TOTAL_USAGE_HRS_INST: "reserved-total-usage-hrs-inst",
    RESERVED_TOTAL_USAGE_HRS_VCPU: "reserved-total-usage-hrs-vcpu",
    SPOT_AVG_RUN_TIME_BEFORE_INTERRUPTION_INST: "spot-avg-run-time-before-interruption-inst",
    SPOT_MAX_RUN_TIME_BEFORE_INTERRUPTION_INST: "spot-max-run-time-before-interruption-inst",
    SPOT_MIN_RUN_TIME_BEFORE_INTERRUPTION_INST: "spot-min-run-time-before-interruption-inst",
    SPOT_TOTAL_ESTIMATED_COST: "spot-total-estimated-cost",
    SPOT_TOTAL_USAGE_HRS_INST: "spot-total-usage-hrs-inst",
    SPOT_TOTAL_USAGE_HRS_VCPU: "spot-total-usage-hrs-vcpu",
    UNRESERVED_TOTAL_ESTIMATED_COST: "unreserved-total-estimated-cost",
    UNRESERVED_TOTAL_USAGE_HRS_INST: "unreserved-total-usage-hrs-inst",
    UNRESERVED_TOTAL_USAGE_HRS_VCPU: "unreserved-total-usage-hrs-vcpu",
};
export const ReservationEndDateType = {
    LIMITED: "limited",
    UNLIMITED: "unlimited",
};
export const ReservationType = {
    CAPACITY_BLOCK: "capacity-block",
    ODCR: "odcr",
};
export const CapacityTenancy = {
    DEDICATED: "dedicated",
    DEFAULT: "default",
};
export const UnlimitedSupportedInstanceFamily = {
    t2: "t2",
    t3: "t3",
    t3a: "t3a",
    t4g: "t4g",
};
export const PartitionLoadFrequency = {
    DAILY: "daily",
    MONTHLY: "monthly",
    NONE: "none",
    WEEKLY: "weekly",
};
export const EkPubKeyFormat = {
    der: "der",
    tpmt: "tpmt",
};
export const EkPubKeyType = {
    ECC_SEC_P384: "ecc-sec-p384",
    RSA_2048: "rsa-2048",
};
export const IpamComplianceStatus = {
    compliant: "compliant",
    ignored: "ignored",
    noncompliant: "noncompliant",
    unmanaged: "unmanaged",
};
export const IpamOverlapStatus = {
    ignored: "ignored",
    nonoverlapping: "nonoverlapping",
    overlapping: "overlapping",
};
export const IpamAddressHistoryResourceType = {
    eip: "eip",
    instance: "instance",
    network_interface: "network-interface",
    subnet: "subnet",
    vpc: "vpc",
};
export const DescribeVpnConnectionsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnections && {
        VpnConnections: obj.VpnConnections.map((item) => VpnConnectionFilterSensitiveLog(item)),
    }),
});
export const DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider),
    }),
});
export const VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }),
});
export const ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserTrustProvider && {
        UserTrustProvider: VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog(obj.UserTrustProvider),
    }),
});
export const GetInstanceTpmEkPubResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KeyValue && { KeyValue: SENSITIVE_STRING }),
});
